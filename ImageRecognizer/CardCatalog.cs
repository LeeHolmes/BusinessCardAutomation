//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace CatalogManager {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class CardCatalog : DataSet {
        
        private CommandCardsDataTable tableCommandCards;
        
        public CardCatalog() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected CardCatalog(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CommandCards"] != null)) {
                    this.Tables.Add(new CommandCardsDataTable(ds.Tables["CommandCards"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CommandCardsDataTable CommandCards {
            get {
                return this.tableCommandCards;
            }
        }
        
        public override DataSet Clone() {
            CardCatalog cln = ((CardCatalog)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["CommandCards"] != null)) {
                this.Tables.Add(new CommandCardsDataTable(ds.Tables["CommandCards"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCommandCards = ((CommandCardsDataTable)(this.Tables["CommandCards"]));
            if ((this.tableCommandCards != null)) {
                this.tableCommandCards.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "CardCatalog";
            this.Prefix = "";
            this.Namespace = "http://www.leeholmes.com/schemas/CardCatalog.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCommandCards = new CommandCardsDataTable();
            this.Tables.Add(this.tableCommandCards);
        }
        
        private bool ShouldSerializeCommandCards() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CommandCardChangeEventHandler(object sender, CommandCardChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CommandCardsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnDescription;
            
            private DataColumn columnCommand;
            
            internal CommandCardsDataTable() : 
                    base("CommandCards") {
                this.InitClass();
            }
            
            internal CommandCardsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn CommandColumn {
                get {
                    return this.columnCommand;
                }
            }
            
            public CommandCard this[int index] {
                get {
                    return ((CommandCard)(this.Rows[index]));
                }
            }
            
            public event CommandCardChangeEventHandler CommandCardChanged;
            
            public event CommandCardChangeEventHandler CommandCardChanging;
            
            public event CommandCardChangeEventHandler CommandCardDeleted;
            
            public event CommandCardChangeEventHandler CommandCardDeleting;
            
            public void AddCommandCard(CommandCard row) {
                this.Rows.Add(row);
            }
            
            public CommandCard AddCommandCard(System.UInt64 Id, string Description, string Command) {
                CommandCard rowCommandCard = ((CommandCard)(this.NewRow()));
                rowCommandCard.ItemArray = new object[] {
                        Id,
                        Description,
                        Command};
                this.Rows.Add(rowCommandCard);
                return rowCommandCard;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CommandCardsDataTable cln = ((CommandCardsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CommandCardsDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnDescription = this.Columns["Description"];
                this.columnCommand = this.Columns["Command"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(System.UInt64), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnCommand = new DataColumn("Command", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommand);
                this.columnId.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnCommand.AllowDBNull = false;
            }
            
            public CommandCard NewCommandCard() {
                return ((CommandCard)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CommandCard(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CommandCard);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CommandCardChanged != null)) {
                    this.CommandCardChanged(this, new CommandCardChangeEvent(((CommandCard)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CommandCardChanging != null)) {
                    this.CommandCardChanging(this, new CommandCardChangeEvent(((CommandCard)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CommandCardDeleted != null)) {
                    this.CommandCardDeleted(this, new CommandCardChangeEvent(((CommandCard)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CommandCardDeleting != null)) {
                    this.CommandCardDeleting(this, new CommandCardChangeEvent(((CommandCard)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCommandCard(CommandCard row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CommandCard : DataRow {
            
            private CommandCardsDataTable tableCommandCards;
            
            internal CommandCard(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCommandCards = ((CommandCardsDataTable)(this.Table));
            }
            
            public System.UInt64 Id {
                get {
                    return ((System.UInt64)(this[this.tableCommandCards.IdColumn]));
                }
                set {
                    this[this.tableCommandCards.IdColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableCommandCards.DescriptionColumn]));
                }
                set {
                    this[this.tableCommandCards.DescriptionColumn] = value;
                }
            }
            
            public string Command {
                get {
                    return ((string)(this[this.tableCommandCards.CommandColumn]));
                }
                set {
                    this[this.tableCommandCards.CommandColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CommandCardChangeEvent : EventArgs {
            
            private CommandCard eventRow;
            
            private DataRowAction eventAction;
            
            public CommandCardChangeEvent(CommandCard row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CommandCard Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
